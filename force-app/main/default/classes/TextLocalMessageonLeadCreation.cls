public without sharing class TextLocalMessageonLeadCreation {
    Public Static List<lead> LeadsTobeUpdated = new List<lead>();
    
    public void validatemanuallyCreatedLead(List<Lead> newLeads){
        List<Lead> leadsToBeProcessedForAssignment = new List<Lead>();
        for(Lead ld:newLeads){
            if(ld.IsManuallyCreated__c == false){
                leadsToBeProcessedForAssignment.add(ld);
            }
        }
        if(!leadsToBeProcessedForAssignment.isEmpty()){
            leadAssignmentMethod(leadsToBeProcessedForAssignment);
        }
    }
    
    public  static void leadAssignmentMethod(List<Lead> newLeads){
        try{
            List<Execution_Criteria__c> AvailableCriterias = [SELECT Enabled__c,Evaluation_Expression_For_Execution__c,Id,Name ,(SELECT Execution_Criteria__c,Field_Name__c,Field_Type__c,Matching_Type__c,Matching_Value__c,Related_Object__c,Scorecard_Execution_Criteria_Name__c,Scorecard__c,Sequence__c FROM Execution_Criteria_Entry__r WHERE Execution_Criteria__c != null)FROM Execution_Criteria__c where Enabled__c = true];
            map<string,map<string,String>> expectedValuebyCriteria = new map<string,map<string,String>>();
            map<string,Decimal> allotedMarksbySequence = new Map<String,Decimal>();
            map<string,String> criteriaNameById = new Map<String,String>();
            map<string,String> fieldByMatchingType = new Map<String,String>();
            map<string,String> fieldByFieldType = new Map<String,String>();
            map<string,String> leadValueForFields = new Map<String,String>();
            map<String,List<Lead>> mapofCriteriaIdByLeadList = new map<String,List<Lead>>();
            Map<Integer,Boolean> execCriteriaLogicalMap = new Map<Integer,Boolean>();
            
            for(Execution_Criteria__c scr:AvailableCriterias){
                map<string,string> fieldNameByMatching = new Map<String,string>();
                for(Execution_Criteria_Entry__c exe:scr.Execution_Criteria_Entry__R){
                    fieldNameByMatching.put(exe.Field_Name__c,exe.Matching_Value__c);
                    fieldByMatchingType.put(exe.Field_Name__c,exe.Matching_Type__c);
                    fieldByFieldType.put(exe.Field_Name__c,exe.Field_Type__c);
                }
                expectedValuebyCriteria.put(scr.Name,fieldNameByMatching);
                criteriaNameById.put(scr.Name,scr.Id);
            }
            for(Lead ld:newLeads){
                for(String criteriaName : expectedValuebyCriteria.keyset()){
                    system.debug('criteriaName::'+criteriaName);
                    integer matchedValues = 0;
                    for(String field:expectedValuebyCriteria.get(criteriaName).Keyset())  {
                        system.debug('field::'+field);
                        if(fieldByFieldType.get(field) == 'Date'){
                            if(fieldByMatchingType.get(field) == '<' || fieldByMatchingType.get(field) == '<='){
                                if(date.valueOf(expectedValuebyCriteria.get(criteriaName).get(field)) <= date.valueOf(ld.get(field))){
                                    matchedValues++;
                                }  
                            }else if(fieldByMatchingType.get(field) == '>' || fieldByMatchingType.get(field) == '>='){
                                if(date.valueOf(expectedValuebyCriteria.get(criteriaName).get(field)) >= date.valueOf(ld.get(field))){
                                    matchedValues++;
                                }  
                            }else{
                                if(date.valueOf(expectedValuebyCriteria.get(criteriaName).get(field)) == date.valueOf(ld.get(field))){
                                    matchedValues++;
                                }  
                            }   
                        }else if(fieldByFieldType.get(field) == 'Number'){
                            if(fieldByMatchingType.get(field) == '<' || fieldByMatchingType.get(field) == '<='){
                                if(Integer.valueOf(expectedValuebyCriteria.get(criteriaName).get(field)) <= Integer.valueOf(ld.get(field))){
                                    matchedValues++;
                                }  
                            }else if(fieldByMatchingType.get(field) == '>' || fieldByMatchingType.get(field) == '>='){
                                if(Integer.valueOf(expectedValuebyCriteria.get(criteriaName).get(field)) >= Integer.valueOf(ld.get(field))){
                                    matchedValues++;
                                }  
                            }else{
                                if(Integer.valueOf(expectedValuebyCriteria.get(criteriaName).get(field)) == Integer.valueOf(ld.get(field))){
                                    matchedValues++;
                                }  
                            }
                        }else{
                            if(fieldByMatchingType.get(field) == '=='){
                                system.debug(expectedValuebyCriteria.get(criteriaName).get(field));
                                if(expectedValuebyCriteria.get(criteriaName).get(field).contains(',')){
                                    List<String> commaSeparatedValues = expectedValuebyCriteria.get(criteriaName).get(field).split(',');
                                    for(String Str:commaSeparatedValues){
                                        if(Str == String.valueOf(ld.get(field))){
                                            matchedValues++;
                                        } 
                                    }
                                }else{
                                    if(expectedValuebyCriteria.get(criteriaName).get(field) == String.valueOf(ld.get(field))){
                                        matchedValues++;
                                    }   
                                }    
                            }else if(fieldByMatchingType.get(field) == '!='){
                                if(expectedValuebyCriteria.get(criteriaName).get(field) != String.valueOf(ld.get(field))){
                                    matchedValues++;
                                }  
                            }else if(fieldByMatchingType.get(field) == 'CONTAINS'){
                                //system.debug('Coming heree..?'+expectedValuebyCriteria.get(criteriaName).get(field)+'--'+String.valueOf(ld.get(field)));
                                if(String.valueOf(ld.get(field)) != null){
                                    if((String.valueOf(ld.get(field)).contains(expectedValuebyCriteria.get(criteriaName).get(field)))){
                                        matchedValues++;
                                    }   
                                }
                                
                            }else if(fieldByMatchingType.get(field) == 'DOES NOT CONTAIN'){
                                if(!expectedValuebyCriteria.get(criteriaName).get(field).contains(String.valueOf(ld.get(field)))){
                                    matchedValues++;
                                }  
                            }
                        }
                    }
                    allotedMarksbySequence.put(criteriaName,matchedValues);
                }
                system.debug('allotedMarksbySequence'+allotedMarksbySequence);
                system.debug('allotedMarksbySequence::'+LeadsTobeUpdated);
                system.debug('criteriaNameById::'+criteriaNameById);
                getSuitableCriteriaAndAssignLead(allotedMarksbySequence,ld.Id,criteriaNameById);   
            }
            system.debug('LeadsTobeUpdated'+LeadsTobeUpdated);
            if(LeadsTobeUpdated.size() > 0){
                database.update(LeadsTobeUpdated);
            }
        }catch(exception e){
            system.debug('Get Message'+e.getmessage()+'line @'+e.getLineNumber());
        }
    }
    
    public String leadScoregeneration(List<Lead> newLeads) {
        List<Lead> newLeadsToBeUpdated = [SELECT Address,Budget_Amount__c,Campaign_Comment__c,Campaign_Country_Code__c,City,Company,Country,CountryCode,CreatedDate,Created_time__c,Date_of_Birth__c,District__c,Email,Enquiry_Type__c,Feedback_Comments__c,FirstName,First_contact_date_time__c,Franchisee_Name__c,Gender__c,HasOptedOutOfEmail,Id,Include__c,Industry,Interested_Product__c,IsConverted,IsLeadScored__c,is_Lead_Scored__c,LastActivityDate,LastModifiedById,LastModifiedDate,LastName,LeadSource,Lead_Id__c,Lead_Key__c,Lead_Number__c,Loss_Reason__c,Maximum_Score__c,MiddleName,MobilePhone,Name,Occupation__c,OwnerId,Payment_Mode__c,Phone,PostalCode,Product_Category__c,Rating,SMS_Campaign__c,State,StateCode,Status,Title,Updated_Phone__c,Website FROM Lead where id IN :newLeads];
        Decimal totalScore = 0;
        decimal MaximumScore = 0;
        List<Scorecard__c> ScoreList = [SELECT Enabled__c,Total_Weight__c,(SELECT Field_Name__c,Field_Type__c,Matching_Type__c,Matching_Value__c,Related_Object__c,Scorecard_Execution_Criteria_Name__c,Scorecard__c,Sequence__c FROM Execution_Criteria_Entry__R) FROM Scorecard__c where enabled__c = true];
        map<string,String> expectedValuebyCriteria = new Map<String,String>();
        map<string,Decimal> allotedMarksbyCriteria = new Map<String,Decimal>();
        map<string,String> fieldByMatchingType = new Map<String,String>();
        map<string,String> fieldByFieldType = new Map<String,String>();
        map<string,String> leadValueForFields = new Map<String,String>();
        for(Scorecard__c scr:ScoreList){
            for(Execution_Criteria_Entry__c exe:scr.Execution_Criteria_Entry__R){
                expectedValuebyCriteria.put(exe.Field_Name__c,exe.Matching_Value__c);
                fieldByMatchingType.put(exe.Field_Name__c,exe.Matching_Type__c);
                fieldByFieldType.put(exe.Field_Name__c,exe.Field_Type__c);
                allotedMarksbyCriteria.put(exe.Field_Name__c,exe.Sequence__c);
            }
        }
        system.debug('expectedValuebyCriteria'+expectedValuebyCriteria);    
        system.debug('allotedMarksbyCriteria'+allotedMarksbyCriteria);    
        
        for(String fieldval : expectedValuebyCriteria.keyset()){
            for(Lead ld:newLeadsToBeUpdated)  {
                MaximumScore = MaximumScore+allotedMarksbyCriteria.get(fieldval);
                if(fieldByMatchingType.get(fieldval) == 'Date'){
                    if(fieldByMatchingType.get(fieldval) == '<' || fieldByMatchingType.get(fieldval) == '<='){
                        if(date.valueOf(expectedValuebyCriteria.get(fieldval)) <= date.valueOf(ld.get(fieldval))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    }else if(fieldByMatchingType.get(fieldval) == '>' || fieldByMatchingType.get(fieldval) == '>='){
                        if(date.valueOf(expectedValuebyCriteria.get(fieldval)) >= date.valueOf(ld.get(fieldval))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    }else{
                        if(date.valueOf(expectedValuebyCriteria.get(fieldval)) == date.valueOf(ld.get(fieldval))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    } 
                }else if(fieldByMatchingType.get(fieldval) == 'Number'){
                    if(fieldByMatchingType.get(fieldval) == '<' || fieldByMatchingType.get(fieldval) == '<='){
                        if(Integer.valueOf(expectedValuebyCriteria.get(fieldval)) <= Integer.valueOf(ld.get(fieldval))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    }else if(fieldByMatchingType.get(fieldval) == '>' || fieldByMatchingType.get(fieldval) == '>='){
                        if(Integer.valueOf(expectedValuebyCriteria.get(fieldval)) >= Integer.valueOf(ld.get(fieldval))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    }else{
                        if(Integer.valueOf(expectedValuebyCriteria.get(fieldval)) == Integer.valueOf(ld.get(fieldval))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    } 
                }else{
                    if(fieldByMatchingType.get(fieldval) == '=='){
                        if(expectedValuebyCriteria.get(fieldval).contains(',')){
                            List<String> commaSeparatedValues = expectedValuebyCriteria.get(fieldval).split(',');
                            for(String Str:commaSeparatedValues){
                                if(Str == String.valueOf(ld.get(fieldval))){
                                    totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                                } 
                            }
                        }else{
                            if(expectedValuebyCriteria.get(fieldval) == String.valueOf(ld.get(fieldval))){
                                totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                            }     
                        } 
                    }else if(fieldByMatchingType.get(fieldval) == '!='){
                        if(expectedValuebyCriteria.get(fieldval) != String.valueOf(ld.get(fieldval))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    }else if(fieldByMatchingType.get(fieldval) == 'CONTAINS'){
                        if(ld.get(fieldval) != null){
                            if(expectedValuebyCriteria.get(fieldval).contains(String.valueOf(ld.get(fieldval)))){
                                totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                            }     
                        }
                        
                    }else if(fieldByMatchingType.get(fieldval) == 'DOES NOT CONTAIN'){
                        if(!expectedValuebyCriteria.get(fieldval).contains(String.valueOf(ld.get(fieldval)))){
                            totalScore = totalScore+allotedMarksbyCriteria.get(fieldval);
                        }  
                    }
                }
                ld.Lead_Score__c=totalScore;
                ld.Maximum_Score__c = MaximumScore;
                
            }
        }
        system.debug('newLeadsToBeUpdated'+newLeadsToBeUpdated);
        update newLeadsToBeUpdated;
        return 'Success';
    }
    
    public Static void getSuitableCriteriaAndAssignLead(map<string,Decimal> allotedMarksbySequence,String LeadId, map<string,String> criteriaNameById){
        List<Decimal> i_values = allotedMarksbySequence.values();
        i_values.sort();
        
        Decimal i_max_value = i_values[(i_values.size()-1)];
        String ExecutionCriteriaName = '';
        for(String s : allotedMarksbySequence.keySet()){
            Decimal oppty_map_value = allotedMarksbySequence.get(s);
            if(oppty_map_value == i_max_value){
                ExecutionCriteriaName =  s;
            }
        }
        String leadAssCriteriaId = criteriaNameById.get(ExecutionCriteriaName);
        system.debug('The Selected ExecutionCriteriaName Is'+ExecutionCriteriaName);
        
        List<Assignment_Group__c> AssGroupList = [SELECT Id,Total_Lead_Count_of_Members__c,Name,Max_Lead_Per_Day__c,Minimum_Lead_Volume__c,Lead_Stage_Exceed_Count__c FROM Assignment_Group__c where Lead_Assigning_Criteria__c =:leadAssCriteriaId ORDER BY Max_Lead_Per_Day__c DESC NULLS LAST ];
        map<String,Decimal> groupIdByTotalCapacity = new map<String,Decimal>();
        map<String,Decimal> memberIdByTotalAssigned = new map<String,Decimal>();
        map<String,Decimal> memberIdByTotalAvailableCapacity = new map<String,Decimal>();
        
        if(AssGroupList.size() > 1){
            for(Assignment_Group__c assGr : AssGroupList){
                groupIdByTotalCapacity.put(assGr.Id,assGr.Total_Lead_Count_of_Members__c);
            }
            List<Decimal> count_values = groupIdByTotalCapacity.values();
            count_values.sort();
            
            Decimal max_value = count_values[(count_values.size()-1)];
            String assignmentGroupwithHighestCap = '';
            for(String s : groupIdByTotalCapacity.keySet()){
                Decimal map_value = groupIdByTotalCapacity.get(s);
                if(map_value == max_value){
                    assignmentGroupwithHighestCap =  s;
                }
            }
            system.debug('Assignment Group With Highes Capacity is ===========>'+assignmentGroupwithHighestCap);
            
            List<Assignment_Group_Member__c> groupMembers = [SELECT Group_Member__c,Id,Max_Lead_Per_Day__c,Name FROM Assignment_Group_Member__c where Active__c = true and Assignment_Group__c = :assignmentGroupwithHighestCap ORDER BY Max_Lead_Per_Day__c DESC NULLS LAST];
            // If members are greater than 1 in a group...
            if(groupMembers.size() > 1){
                map<String,Decimal> groupMemberIdByTotalCapacity = new map<String,Decimal>();
                
                for(Assignment_Group_Member__c assGrMem : groupMembers){
                    groupMemberIdByTotalCapacity.put(assGrMem.Id,assGrMem.Max_Lead_Per_Day__c);
                }
                List<Lead> countForLeads= [SELECT Id,Name FROM Lead where ownerid IN : groupMemberIdByTotalCapacity.keyset() AND CreatedDate = :system.today()];
                
                for(Lead lds:countForLeads){
                    if(memberIdByTotalAssigned.containsKey(lds.ownerid)){
                        memberIdByTotalAssigned.put(lds.ownerid,memberIdByTotalAssigned.get(lds.ownerid)+1);
                    }else{
                        memberIdByTotalAssigned.put(lds.ownerid,1);
                    }
                }
                
                for(String str : groupMemberIdByTotalCapacity.keyset()){
                    memberIdByTotalAvailableCapacity.put(str,groupMemberIdByTotalCapacity.get(str)-groupMemberIdByTotalCapacity.get(str));
                }
                system.debug('memberIdByTotalAvailableCapacity'+memberIdByTotalAvailableCapacity);
                List<Decimal> values = memberIdByTotalAvailableCapacity.values();
                values.sort();
                Decimal maxm_value = values[(values.size()-1)];
                String groupMemberwithHighestCap = '';
                for(String s : memberIdByTotalAvailableCapacity.keySet()){
                    Decimal map_val = memberIdByTotalAvailableCapacity.get(s);
                    if(map_val == maxm_value){
                        groupMemberwithHighestCap =  s;
                    }
                }
                system.debug('Group Member With Highest available Capacity now'+groupMemberwithHighestCap);
                
                Time logOutTime = Time.newInstance(21,00,00,00);
                DateTime now = DateTime.now();
                Time currentTime = Time.newInstance(now.hour(),now.minute(),now.second(),00);
                
                //Getting the Queue in case it is not assigned to a user..
                
                Group defLeadQueue = [Select Id from Group where Type = 'Queue' AND Name = 'Lead Default Queue' LIMIT 1];
                
                //if user has logged in today and time is not greater than 9:00 pm
                List<User_Tracking__c> trackingList = [SELECT Checkin_Datetime__c,Checkout_Datetime__c,Check_in_Date__c,CreatedDate,Member__c FROM User_Tracking__c where Member__c =:groupMemberwithHighestCap AND CreatedDate = :system.today() ORDER BY CreatedDate DESC ];
                if(trackingList.size() > 0 &&  (currentTime < logOutTime)){
                    system.debug('groupMemberwithHighestCap'+groupMemberwithHighestCap);
                    Lead ld = new lead(Id = LeadId,OwnerId  = groupMemberwithHighestCap,Owner__c = groupMembers[0].Group_Member__c);
                    LeadsTobeUpdated.add(ld);
                }else{
                    Lead ld = new lead(Id = LeadId,OwnerId  = defLeadQueue.Id ,Owner__c = groupMembers[0].Group_Member__c);
                    LeadsTobeUpdated.add(ld);
                }
            }else{
                Lead ld = new lead(Id = LeadId,OwnerId  = groupMembers[0].Group_Member__c ,Owner__c = groupMembers[0].Group_Member__c);
                LeadsTobeUpdated.add(ld);
            }
            system.debug(LeadsTobeUpdated);
            update LeadsTobeUpdated;
        }else{
            List<Assignment_Group_Member__c> groupMembers = [SELECT Group_Member__c,Id,Max_Lead_Per_Day__c,Name FROM Assignment_Group_Member__c where Active__c = true and Assignment_Group__c = :AssGroupList[0].Id ORDER BY Max_Lead_Per_Day__c DESC NULLS LAST];
            if(groupMembers.size() > 1){
                map<String,Decimal> groupMemberIdByTotalCapacity = new map<String,Decimal>();
                
                for(Assignment_Group_Member__c assGrMem : groupMembers){
                    groupMemberIdByTotalCapacity.put(assGrMem.Id,assGrMem.Max_Lead_Per_Day__c);
                }
                List<Lead> countForLeads= [SELECT Id,Name FROM Lead where ownerid IN : groupMemberIdByTotalCapacity.keyset() AND CreatedDate = :system.today()];
                
                for(Lead lds:countForLeads){
                    if(memberIdByTotalAssigned.containsKey(lds.ownerid)){
                        memberIdByTotalAssigned.put(lds.ownerid,memberIdByTotalAssigned.get(lds.ownerid)+1);
                    }else{
                        memberIdByTotalAssigned.put(lds.ownerid,1);
                    }
                }
                
                for(String str : groupMemberIdByTotalCapacity.keyset()){
                    memberIdByTotalAvailableCapacity.put(str,groupMemberIdByTotalCapacity.get(str)-groupMemberIdByTotalCapacity.get(str));
                }
                system.debug('memberIdByTotalAvailableCapacity'+memberIdByTotalAvailableCapacity);
                List<Decimal> values = memberIdByTotalAvailableCapacity.values();
                values.sort();
                Decimal maxm_value = values[(values.size()-1)];
                String groupMemberwithHighestCap = '';
                for(String s : memberIdByTotalAvailableCapacity.keySet()){
                    Decimal map_val = memberIdByTotalAvailableCapacity.get(s);
                    if(map_val == maxm_value){
                        groupMemberwithHighestCap =  s;
                    }
                }
                system.debug('Group Member With Highest available Capacity now'+groupMemberwithHighestCap);
                
                Time logOutTime = Time.newInstance(21,00,00,00);
                DateTime now = DateTime.now();
                Time currentTime = Time.newInstance(now.hour(),now.minute(),now.second(),00);
                
                //Getting the Queue in case it is not assigned to a user..
                
                Group defLeadQueue = [Select Id from Group where Type = 'Queue' AND Name = 'Lead Default Queue' LIMIT 1];
                
                //if user has logged in today and time is not greater than 9:00 pm
                List<User_Tracking__c> trackingList = [SELECT Checkin_Datetime__c,Checkout_Datetime__c,Check_in_Date__c,CreatedDate,Member__c FROM User_Tracking__c where Member__c =:groupMemberwithHighestCap AND CreatedDate = :system.today() ORDER BY CreatedDate DESC ];
                if(trackingList.size() > 0 &&  (currentTime < logOutTime)){
                    system.debug('groupMemberwithHighestCap'+groupMemberwithHighestCap);
                    Lead ld = new lead(Id = LeadId,OwnerId  = groupMemberwithHighestCap,Owner__c = groupMembers[0].Group_Member__c);
                    LeadsTobeUpdated.add(ld);
                }else{
                    Lead ld = new lead(Id = LeadId,OwnerId  = defLeadQueue.Id ,Owner__c = groupMembers[0].Group_Member__c);
                    LeadsTobeUpdated.add(ld);
                }
            }else{
                Lead ld = new lead(Id = LeadId,OwnerId  = groupMembers[0].Group_Member__c ,Owner__c = groupMembers[0].Group_Member__c);
                LeadsTobeUpdated.add(ld);
            }
            system.debug(LeadsTobeUpdated);
            update LeadsTobeUpdated;
        }
    }
    
    public  void leadInsert(List<Lead> newLeads){
        system.debug(newLeads[0]);
        List<string> Leadids = new List<string>();
        Leadids.add(newLeads[0].id);
        afterinsert(Leadids);
    }

    public void Createtask(List<Lead> newLeads, map<Id, Lead> NewLeadMap){
        List<task> taskListToBeInserted = new List<task>();
        System.debug('NewLeadMap ====>' + NewLeadMap);
        if (!NewLeadMap.isEmpty()) {
            for (Lead ld : NewLeadMap.values()) {
                task tsk = new task();
                tsk.Subject = 'Welcome Call';
                tsk.ActivityDate = System.today();
                tsk.Status = 'Open';
                tsk.Priority = 'Normal';
                tsk.WhoId = ld.Id;
                tsk.OwnerId = ld.OwnerId;
                taskListToBeInserted.add(tsk);
            }        
            if (!taskListToBeInserted.isEmpty()) {
                insert taskListToBeInserted;
            }    
        }

    }
    
    public  void updateLeadsToBeScored(List<Lead> newLeads){
        List<Lead> lstLead = new List<Lead>();
        for(Lead ld : newLeads){
            
            if(ld.LastModifiedDate == system.today()){
                Lead leadRec = new Lead();
                leadRec.Id = ld.Id;
                leadRec.IsLeadScored__c = false;
                lstLead.add(leadRec);
            }  
        }
        database.update(lstLead); 
    }
    
    @Future(callout=true)
    public static void afterinsert(List<string> newLead){
        List<Lead> lstLead = [SELECT id, Phone from Lead where id=: newLead];
        Text_Local_API_Details__c apiDetails = new Text_Local_API_Details__c();
        if(!Test.isRunningTest()){
            apiDetails =[SELECT id, Api_Key__c, Message__c, Sender__c from Text_Local_API_Details__c];
            if(lstLead[0].phone != null){
                String plPhoneNumber = lstLead[0].phone.right(10);
                if(plPhoneNumber.isNumeric() == false ){
                    
                }
                string apikey = apiDetails.Api_Key__c;
                string messages = apiDetails.Message__c;
                string sender = apiDetails.Sender__c;
                string numberse = plPhoneNumber;
                
                
                HttpRequest req = new HttpRequest(); 
                req.setEndpoint('https://api.textlocal.in/send/?apikey='+EncodingUtil.urlEncode(apikey,'UTF-8')+'&message='+EncodingUtil.urlEncode(messages,'UTF-8')+'&sender='+EncodingUtil.urlEncode(sender,'UTF-8')+'&numbers='+EncodingUtil.urlEncode(numberse,'UTF-8')+'');
                req.setMethod('POST');
                req.setHeader('Content-Type','application/json');
                Http http = new Http();
                
                HTTPResponse res = http.send(req);
                string response = res.getBody();
                system.debug('response'+response);
                ResponseStructure resBody  = (ResponseStructure) JSON.deserialize(response,ResponseStructure.class);
                if(resBody.status == 'failure') {
                    Execption__c e = new Execption__c();
                    e.Class_Name__c = 'TextMessageProcess';
                    e.Method_Name__c = 'sendSMS';
                    e.Ececption_Message__c = response;
                    INSERT e;
                }
            }
        }
    }
    
    public  void assignLead(List<Lead> leadList){
        List<Lead> updateList = new List<Lead>();
        Set<String> FranchiseeLeads = new Set<String>();
        for(Lead newLead:leadList){      
            
            if (newLead.Owner__c!=null) {
                Lead nLead = new Lead(Id=newLead.Id,OwnerId = newLead.Owner__c); 
                updateList.add(nLead);     
            }
            if(newLead.Franchisee_Name__c != null &&newLead.Franchisee_Name__c != ''){
                FranchiseeLeads.add(newLead.Id);
            }
        }
        
        if(updateList.size() > 0){
            System.debug('updateList'+updateList);
            LeadAssignmentExecutionCriteria.runLeadAssignment = false;
            update updateList;
            system.debug('updateList'+updateList);
        }
        if(FranchiseeLeads.size() > 0){
            System.debug('FranchiseeLeads'+FranchiseeLeads);
            LeadAssignmentExecutionCriteria.runLeadAssignment = false;
            RoundRobinLeadAssignment.assignLeadsToBDS('Franchisee QR Code', FranchiseeLeads);
            system.debug('updateList'+updateList);
        }
    }
    
    public  void assignLeadsBasedOnSource(List<Lead> leadList){
        map<String,List<Lead>> mapofMissCallGroupNameByLeadList = new map<String,List<Lead>>();
        map<String,List<Lead>> mapofFacebookGroupNameByLeadList = new map<String,List<Lead>>();
        Set<String> leadsFromMC = new Set<String>();
        Set<String> leadsFromFB = new Set<String>();
        
        DefaultGroupAssignment__c missCallGroup = [Select id,Name,Group_Id__c from DefaultGroupAssignment__c where name = 'Missed Call Team'][0];
        DefaultGroupAssignment__c facebookGroup = [Select id,Name,Group_Id__c from DefaultGroupAssignment__c where name = 'FaceBook Group'][0];
        
        for(Lead newLead:leadList){      
            if (newLead.LeadSource !=null) {
                if(newLead.LeadSource == 'Facebook'){
                    leadsFromFB.add(newLead.Id);
                }else if(newLead.LeadSource == 'Missed Call'){
                    leadsFromMC.add(newLead.Id);
                } 
            } 
        }
        
        if(leadsFromFB.size() > 0){
            LeadAssignmentExecutionCriteria.runLeadAssignment = false;
            RoundRobinLeadAssignment.assignLeadsToBDS(facebookGroup.Name,leadsFromFB);
        }
        
        if(leadsFromMC.size() > 0){
            LeadAssignmentExecutionCriteria.runLeadAssignment = false;
            RoundRobinLeadAssignment.assignLeadsToBDS(missCallGroup.Name,leadsFromMC);
        }
    }
    
    public class ResponseStructure {
        public String status;
    }   
    
    public  void updateCompanyBeforeInsert(List<Lead> newLeads){
        system.debug(newLeads[0]);
        List<string> Leadids = new List<string>();
        for(Lead ld:newLeads){
            if(ld.LeadSource == 'Facebook'){
                ld.Company = ld.LastName;
            }
        }
    }

    public void CreateFollowuptask(Map<Id, lead> LeadNewMap, Map<Id, Lead> LeadoldMap){
        List<task> tskList = new list<task>();
        try {
            if (!LeadNewMap.isEmpty()) {
                for (lead ld : LeadNewMap.values()) {
                    if (ld.Follow_Up_Date__c != null && ld.Follow_Up_Date__c != LeadoldMap.get(ld.id).Follow_Up_Date__c) {
                        Task tsk = new Task();
                         tsk.Subject = 'Follow-Up Call';
                         tsk.Status = 'Open';
                         tsk.Priority = 'Normal';
                         tsk.Follow_Up_date__c = ld.Follow_Up_Date__c;
                         tsk.whoId = ld.ID;
                         tsk.OwnerId = ld.OwnerId;
                         tskList.add(tsk);
                    }
                }
                if (!tskList.isempty()) {
                    insert tskList;
                }
                
            }
        } catch (Exception e) {
            System.debug('the eror has occured due to =====> ' + e.getMessage());
            System.debug('the eror has occured at line number =====> ' + e.getLineNumber());
        }
        
    }
    
    public Static void TestCoverage(){
        integer i =0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}