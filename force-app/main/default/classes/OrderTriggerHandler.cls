public without sharing class OrderTriggerHandler{
    public static void CreateTaskOnOrderCreation(List<order> orderList){

        taskAssignmentLogic('Order Task Assignment', orderList);
    }

    public static void taskAssignmentLogic(String groupName, list<Order> orderList){
        system.debug('courseName::' + groupName);
        system.debug('orderList::' + orderList);
        List<lead> updateLeadList = new List<lead>();
        List<Task> taskList = new list<Task>();
        List<Assignment_Group__c> QtoBeUpdated = new List<Assignment_Group__c>();
        Map<String, List<String>> QueueNameToQmemberIdList = new Map<String, List<String>>();

        Map<String, Integer> qNameToLastAssignedQmemberRRid = new Map<String, Integer>();

        Map<String, String> QnameAndRRidToMemberIDMap = new Map<String, String>();


        QueueNameToQmemberIdList = makeCustomQueueNameToListOfUserId(groupName); // group by group member
        system.debug('QueueNameToQmemberIdList::' + QueueNameToQmemberIdList);
        qNameToLastAssignedQmemberRRid = BuildMaps.makeQNameToLastAssignedQmemberRRid(); // qname with last allocated ID
        system.debug('qNameToLastAssignedQmemberRRid::' + qNameToLastAssignedQmemberRRid);
        QnameAndRRidToMemberIDMap = makeQnameAndRRidToMemberID(groupName); // qname with qname+rrid
        system.debug('QnameAndRRidToMemberIDMap::' + QnameAndRRidToMemberIDMap);

        List<Order> orderListTemp = new List<Order>();
        for ( Order ord : orderList ){
            Boolean isAssigned = false;
            Integer qMemberSize = 1;
            While ( QueueNameToQmemberIdList != null && qMemberSize != null && QueueNameToQmemberIdList.get(groupName) != null && isAssigned == false && qMemberSize <= QueueNameToQmemberIdList.get(groupName).size() ){
                Integer currentRRid, LastRRid;
                String QnameAndRRid, qMemberID;
                if ( qNameToLastAssignedQmemberRRid.get(groupName) != null )
                    LastRRid = qNameToLastAssignedQmemberRRid.get(groupName);
                System.debug('LastRRid-------+++++' + LastRRid);
                if ( LastRRid == null || LastRRid < 1 ){
                    qNameToLastAssignedQmemberRRid.remove(groupName);
                    qNameToLastAssignedQmemberRRid.put(groupName, 0);
                    currentRRid = 1;
                    System.debug('Inside 1  currentRRid' + currentRRid);
                }
                system.debug('LastRRid::' + LastRRid);
                system.debug('QueueNameToQmemberIdList.get(groupName).size()::' + QueueNameToQmemberIdList.get(groupName).size());
                if ( LastRRid < QueueNameToQmemberIdList.get(groupName).size() ){
                    currentRRid = LastRRid + 1;
                    System.debug('Inside 2  currentRRid' + currentRRid);
                }
                else{
                    currentRRid = 1;
                    LastRRid = 0;
                    System.debug('Inside 3  currentRRid' + currentRRid);
                }
                QnameAndRRid = groupName + String.valueOf(currentRRid);
                system.debug('QnameAndRRid::' + QnameAndRRid);
                system.debug('QnameAndRRidToMemberIDMap::' + QnameAndRRidToMemberIDMap);
                qMemberID = QnameAndRRidToMemberIDMap.get(QnameAndRRid);
                System.debug('QnameAndRRid::' + QnameAndRRid);
                System.debug('qMemberID::' + qMemberID);
                boolean test = true;
                if(test) {
                    //qName,qMemberID,userIdbyLeadcount,ld.Learner_Uid__c,assignmentConditionSatisfied(true)
                    if ( qMemberID != null ){
                        system.debug('inside avaibility');
                        Task tas = new task(  );
                        tas.Subject = 'Happy Call';
                        tas.WhatId = ord.AccountId;
                        tas.ownerId = qMemberID;//ord.account.ownerId;
                        tas.ActivityDate = system.today() + 2;
                        taskList.add(tas);
                        isAssigned = true;
                        orderListTemp.add(New Order( Id = ord.Id, OwnerId = qMemberID ));
                    }
                    LastRRid = LastRRid + 1;
                    qNameToLastAssignedQmemberRRid.remove(groupName);
                    qNameToLastAssignedQmemberRRid.put(groupName, LastRRid);
                    System.debug('qNameToLastAssignedQmemberRRid::' + qNameToLastAssignedQmemberRRid);
                    qMemberSize++;
                    system.debug('qMemberSize::' + qMemberSize);
                }
                else{
                    LastRRid = LastRRid + 1;
                    qNameToLastAssignedQmemberRRid.remove(groupName);
                    qNameToLastAssignedQmemberRRid.put(groupName, LastRRid);
                    qMemberSize++;
                }
            }
        }


        if ( !qNameToLastAssignedQmemberRRid.keySet().isEmpty() ){
            List<Assignment_Group__c> updateQrId = new List<Assignment_Group__c>();
            updateQrId = [Select id, name, Last_Allocated_RRid__c
                          from Assignment_Group__c
                          where Name IN:qNameToLastAssignedQmemberRRid.keySet()];
            for ( Assignment_Group__c Q : updateQrId ){
                Q.Last_Allocated_RRid__c = qNameToLastAssignedQmemberRRid.get(Q.Name);
                QtoBeUpdated.add(q);
            }
        }
        system.debug('taskList::' + taskList);
        System.debug('updateLeadList---' + updateLeadList);

        if ( !taskList.isEmpty() ){
            insert taskList;
        }
        if ( !updateLeadList.isEmpty() ){
            update updateLeadList;
        }
        if ( !orderListTemp.isEmpty() ){
            update orderListTemp;
        }

        if ( !QtoBeUpdated.isEmpty() )
            Update QtoBeUpdated;
    }

    public static Map<String, List<String>> makeCustomQueueNameToListOfUserId(string assignmentGroupName){
        Map<String, List<String>> customQueueNameToListOfUserId = new Map<String, List<String>>();
        List<Assignment_Group__c> queueWithQueueMembers = new List<Assignment_Group__c>();
        Map<String, Id> queueNameToQueueIdMap = new Map<String, Id>();

        List<Assignment_Group__c> listOfExistingQueue = new List<Assignment_Group__c>();
        listOfExistingQueue = [select id, name, Max_Lead_Per_Day__c
                               from Assignment_Group__c];
        List<Assignment_Group_Member__c> listOfExistingQueueMembers = new List<Assignment_Group_Member__c>();
        listOfExistingQueueMembers = [select id, name, Out_Of_Office__c, Assignment_Group__c, Assignment_Group__r.name, Assignment_Id__c, Leave_End_Date__c, Leave_Start_Date__c, Group_Member__c, Group_Member__r.Id
                                      from Assignment_Group_Member__c
                                      where Assignment_Group__r.name = :assignmentGroupName];
        Set<Id> existingQueueMembersQueueId = new Set<Id>();

        if ( !listOfExistingQueueMembers.isEmpty() ){
            for ( Assignment_Group_Member__c agm : listOfExistingQueueMembers ){
                if ( customQueueNameToListOfUserId.containsKey(agm.Assignment_Group__r.name) ){
                    customQueueNameToListOfUserId.get(agm.Assignment_Group__r.name).add(agm.Group_Member__r.Id);
                }
                else{
                    customQueueNameToListOfUserId.put(agm.Assignment_Group__r.name, new list<string>{ agm.Group_Member__r.Id });
                }
            }
        }
        system.debug('customQueueNameToListOfUserId::' + customQueueNameToListOfUserId);
        return customQueueNameToListOfUserId;
    }

    public static Map<String, Integer> makeQNameToLastAssignedQmemberRRid(){
        Map<String, Integer> qNameToLastAssignedQmemberRRid = new Map<String, Integer>();
        List<Assignment_Group__c> allExistingQueue = new List<Assignment_Group__c>([SELECT id, name, Last_Allocated_RRid__c
                                                                                    from Assignment_Group__c]);
        for ( Assignment_Group__c q : allExistingQueue ){
            if ( q.Last_Allocated_RRid__c != null ){
                qNameToLastAssignedQmemberRRid.put(q.name, Integer.valueOf(q.Last_Allocated_RRid__c));
            }
            else
                qNameToLastAssignedQmemberRRid.put(q.name, null);
        }
        return qNameToLastAssignedQmemberRRid;
    }

    public static Map<String, String> makeQnameAndRRidToMemberID(String groupName){
        //Map<String, Map<String, Integer>> qNameAndMemberIdTORoundRobinIDMaP = new Map<String, Map<String, Integer>>();
        Map<String, String> QnameAndRRidToMemberIDMap = new Map<String, String>();

        list<Assignment_Group_Member__c> agmList = new list<Assignment_Group_Member__c>();
        agmList = [select id, Assignment_Group__r.name, Assignment_Id__c, Group_Member__r.Id, Out_Of_Office__c
                   from Assignment_Group_Member__c
                   where Assignment_Group__r.name = :groupName and Out_Of_Office__c = false];
        system.debug('agmList::' + agmList);
        if ( !agmList.isEmpty() ){
            for ( Assignment_Group_Member__c agm : agmList ){
                String qName = agm.Assignment_Group__r.name;
                String qMember = string.valueOf(agm.Assignment_Id__c);
                system.debug('qName::' + qName);
                system.debug('qMember::' + qMember);
                if ( !string.isBlank(qName) && !String.isBlank(qMember) ){
                    String qNameAndQmamber = qName + qMember;
                    system.debug('qNameAndQmamber::' + qNameAndQmamber);
                    QnameAndRRidToMemberIDMap.put(qNameAndQmamber, String.valueOf(agm.Group_Member__r.Id));
                }
            }
        }

        //System.debug('QnameAndRRidToMemberIDMap---'+QnameAndRRidToMemberIDMap);
        return QnameAndRRidToMemberIDMap;
    }

    public static void completeHappyCall(list<Order> newOrderList, map<Id, Order> oldOrderMapDet){
        Set<String> setofAccountId = new set<String>();
        list<HappyCallTaskCompleteValue__c> happyCallCustom = [select id, Happy_Call_Value__c
                                                               from HappyCallTaskCompleteValue__c
                                                               limit 1];
        system.debug('happyCallCustom::' + happyCallCustom);
        for ( Order ord : newOrderList ){
            system.debug('ord.Happy_Call__c::' + ord.Happy_Call__c);
            system.debug('oldOrderMapDet.get(ord.Id).Happy_Call__c::' + oldOrderMapDet.get(ord.Id).Happy_Call__c);
            system.debug('happyCallCustom[0].Happy_Call_Value__c::' + happyCallCustom[0].Happy_Call_Value__c);
            system.debug('ord.Interested_New_product__c::' + ord.Interested_New_product__c);
            if ( ord.Happy_Call__c != null && ord.Happy_Call__c != oldOrderMapDet.get(ord.Id).Happy_Call__c && ord.Happy_Call__c == happyCallCustom[0].Happy_Call_Value__c && ( ord.Interested_New_product__c == 'Yes' || ord.Interested_New_product__c == 'No' ) ){
                setofAccountId.add(ord.AccountId);
            }
        }
        system.debug('setofAccountId::' + setofAccountId);
        if ( !setofAccountId.isEmpty() ){
            List<Task> taskListTobeUpdate = new list<Task>();
            taskListTobeUpdate = [select id, status, WhatId, subject
                                  from task
                                  where whatId in:setofAccountId and subject = 'Happy Call'];
            system.debug('taskListTobeUpdate::' + taskListTobeUpdate);
            if ( !taskListTobeUpdate.isEmpty() ){
                for ( Task ts : taskListTobeUpdate ){
                    ts.status = 'Completed';
                }

                update taskListTobeUpdate;
            }
        }
    }

    public static void OrdermanualShareRead(List<Order> OrderList){
        try{
            Set<id> userIdwithFranchiseeProfile = new Set<Id>();
            Map<String, string> mapOfUserNameById = new Map<String, string>();
            List<AccountShare> accShareList = new List<AccountShare>();
            List<user> userList = [Select name, id, Franchisee_Name__c
                                   From user
                                   where Is_Franchisee__c = true];
            for ( User u : userList ){
                userIdwithFranchiseeProfile.add(u.Id);
                mapOfUserNameById.put(u.Franchisee_Name__c, u.id);
            }

            system.debug('mapOfUserNameById :: ' + mapOfUserNameById);
            if ( !OrderList.isempty() ){
                for ( order ord : OrderList ){
                    system.debug('mapOfUserNameById.get(ord.Franchisee_Name__c) :: ' + mapOfUserNameById.get(ord.Franchisee_Name__c));
                    system.debug(' ord.Franchisee_Name__c :: ' + ord.Franchisee_Name__c);
                    system.debug(' ord Account ID :: ' + ord.AccountId);
                    if ( ord.Franchisee__c != null && mapOfUserNameById.get(ord.Franchisee_Name__c) != Null ){
                        AccountShare accShare = new AccountShare();
                        accShare.AccountId = ord.AccountId;
                        accShare.RowCause = Schema.AccountShare.RowCause.Manual;
                        accShare.UserOrGroupId = mapOfUserNameById.get(ord.Franchisee_Name__c);
                        accShare.AccountAccessLevel = 'read';
                        accShare.opportunityAccessLevel = 'read';
                        accShareList.add(accShare);
                    }

                }
                system.debug('accShareList :: ' + accShareList);
                if ( !accShareList.isEmpty() ){
                    Database.SaveResult[] lsr = Database.insert ( accShareList, false );
                }
            }

        }
        catch ( DmlException e ){
            System.debug('The following exception has occurred: ' + e.getMessage() + ' at Line Number :: ' + e.getLineNumber());
        }
    }

    public static void createFEMIandhappycallTask(map<id, order> ordernewmap, map<id, order> orderoldmap){

        System.debug('ordernewmap====> ' + ordernewmap);
        System.debug('orderoldmap====> ' + orderoldmap);
        String ordertype = System.Label.Order_Type;
        System.debug('ordertype ===> ' + ordertype);
        List<task> tasklist = new list<task>();

        if ( !ordernewmap.isEmpty() ){
            for ( order ord : ordernewmap.values() ){
            }

        }
        if ( !ordernewmap.isEmpty() ){
            for ( order ord : ordernewmap.values() ){

                Task tsk = new Task(  );
                tsk.Status = 'Open';
                tsk.Priority = 'High';
                tsk.WhatId = ord.AccountId;
                tsk.ActivityDate = System.today();
                tsk.Product_Purchase_Date__c = ord.EffectiveDate;
                tsk.OwnerId = ord.ownerId;
                if ( ord.Type == 'BFL' && ord.Type != null ){
                    tsk.Subject = 'FEMI Call';
                    tasklist.add(tsk);
                }
                else if ( ord.Type != 'BFL' || ord.Type == null ){
                    tsk.Subject = 'Happy Call';
                    tasklist.add(tsk);
                }
            }

            if ( !tasklist.isEmpty() ){
                insert tasklist;
            }
        }
    }

    public static void CreateFEMIcall(Map<id, order> OrderoldMap, Map<id, Order> orderNewMap){
        List<task> FemicallCallTaskList = new List<task>();
        try{
            if ( !orderNewMap.isEmpty() ){
                for ( order updatedorder : orderNewMap.values() ){
                    if ( updatedorder.EMI_Amount__c != null && OrderoldMap.get(updatedorder.id).EMI_Amount__c != updatedorder.EMI_Amount__c && updatedorder.EMI_Date__c != null && OrderoldMap.get(updatedorder.id).EMI_Date__c != updatedorder.EMI_Date__c ){
                        Task tsk = new Task();
                        tsk.Status = 'Open';
                        tsk.Priority = 'High';
                        tsk.WhatId = updatedorder.AccountId;
                        tsk.ActivityDate = System.today();
                        tsk.Product_Purchase_Date__c = updatedorder.EffectiveDate;
                        tsk.OwnerId = updatedorder.ownerId;
                        tsk.Subject = 'FEMI Call';
                        FemicallCallTaskList.add(tsk);
                    }

                }
                System.debug('FemicallCallTaskList =====> ' + FemicallCallTaskList);
                if (!FemicallCallTaskList.isEmpty()) {
                    insert FemicallCallTaskList;
                }
            }

        }
        catch ( Exception e ){
            System.debug('the error has occured due to =====> ' + e.getMessage());
            System.debug('the error has occured at line number =====> ' + e.getLineNumber());

        }
    }

    /*Public static void CloseOpportunityOnordebasis(Map<Id,order> orderNewMap, List<order> neworderlist){

     if (!orderNewMap.isEmpty()) {
     for (type variable : List_or_set) {

     }
     }

     }*/
    public Static void TestCoverage(){
        integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }

}